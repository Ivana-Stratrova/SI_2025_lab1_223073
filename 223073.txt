Чекор 10:
- Додадени 9 issues во Project SI2025:
  1. Remove a task by name
  2. Find all completed tasks
  3. List tasks sorted by name
  4. Sort tasks by priority
  5. Filter tasks by category
  6. Find the highest-priority unfinished task
  7. Count tasks per category
  8. Mark a task as completed by name
  9. Mark all tasks in a category as completed
- Секој issue е поврзан со репозиториумот SI_2025_lab1_223073

Чекор 11:
- Во In Progress се преместени следните issues:
  1. Remove a task by name
  2. Sort tasks by priority
  3. Count tasks per category

Чекор 12:
- Генерирани гранки од issues:
  - Remove a task by name → гранка: 1-remove-a-task-by-name
  - Sort tasks by priority → гранка: 2-sort-tasks-by-priority
  - Count tasks per category → гранка: 3-count-tasks-per-category
- Секоја гранка е поврзана со соодветниот issue

Чекор 13:
Команда:
git fetch origin
Објаснување:
- Оваа команда ги повлекува сите remote гранки од GitHub без да направи merge.
- Се креираат tracking гранки локално за гранките:
  - 1-remove-a-task-by-name
  - 2-sort-tasks-by-priority
  - 3-count-tasks-per-category

Чекор 14:
Команда:
git checkout -b 1-remove-a-task-by-name origin/1-remove-a-task-by-name
Објаснување:
- Креира локална гранка и се префрлува на неа.
- Поврзана е со remote гранката 1-remove-a-task-by-name.

Чекор 14.1:
Имплементирана метода: removeTaskByName
Код:
public void removeTaskByName(String name) {
    tasks.removeIf(task -> task.getName().equals(name));
}
Објаснување:
- Методата ги брише сите задачи чие име е еднакво со даденото.

Команди:
git add .
git commit -m "Implement removeTaskByName"
Објаснување:
- Првата команда ги додава сите променети фајлови во staging area.
- Втората прави commit со опис на промената.


Команда:
git push origin 1-remove-a-task-by-name
Објаснување:
- Го праќа локалниот commit на гранката кон GitHub.
- Креиран Pull Request од гранката 1-remove-a-task-by-name кон master.
- Преку GitHub.


Чекор 14.2:
git checkout -b 2-sort-tasks-by-priority origin/2-sort-tasks-by-priority
Имплементација:
public void sortTasksByPriority() {
    tasks.sort(Comparator.comparingInt(Task::getPriority));
}
Објаснување:
- Методата ги сортира задачите по приоритет во растечки редослед.

Команда:
git add .
git commit -m "Implement sortTasksByPriority"

Команда:
git push origin 2-sort-tasks-by-priority
- Креирано Pull Request преку GitHub

Чекор 14.3:
git checkout -b 3-count-tasks-per-category origin/3-count-tasks-per-category
Имплементација:
public Map<String, Integer> countTasksPerCategory() {
        Map<String, Integer> categoryCountMap = new HashMap<>();

        // Loop through the tasks and count them by category
        for (Task task : tasks) {
            String category = task.getCategory();
            categoryCountMap.put(category, categoryCountMap.getOrDefault(category, 0) + 1);
        }

        return categoryCountMap;
    }Објаснување:
- Методата брои колку задачи има по категорија и ги враќа во мапа.

Команда:
git add .
git commit -m "Implement countTasksPerCategory"
Команда:
git push origin 3-count-tasks-per-category
- Креирано Pull Request преку GitHub

Чекор 20: 
Merged:
1-remove-a-task-by-name
2-sort-tasks-by-priority
Конфликти: Не се појавија конфликти.
Стратегија: GitHub користи fast-forward merge или merge commit ако има повеќе commits.
Pull requests се успешно споени преку веб-интерфејс.

Чекор 21: Проверка на Project board
Issues што беа споени:
- Remove a task by name
- Sort tasks by priority
Автоматски се преместени во фазата Done.

Чекор 22: Merge на третата гранка локално
Команди:
git checkout master
git pull origin master
git merge 3-count-tasks-per-category
Конфликти: Не се појавија конфликти.
Стратегија: merge commit (дефолт merge стратегија на Git).

Чекор 23: Push на локалниот master
Команда:
git push origin master

Чекор 24: Проверка по merge на третата гранка
Pull request за 3-count-tasks-per-category е автоматски затворен.

Чекор 25: Финален commit
Додадени датотеки:
- logs.txt (со git логовите од сите гранки)
- 223073.txt (документацијата за текот на лабораториската вежба)
Команди:
git add logs.txt 223073.txt
git commit -m "Final commit"

Чекор 26: Финален push
Команда:
git push origin master

Чекор 27: Fork на репозиториум
Направен fork од официјалниот репозиториум
Fork се појави на мојот GitHub профил
Објаснување:
Со fork се креира копија од оригиналниот репозиториум во мојот профил, што ми овозможува да направам сопствени промени без да влијаам врз оригиналот.

Чекор 28: Клонирање на fork-от
Објаснување:
Со git clone ја симнувам локално копијата од мојот fork. Со cd влегувам во директориумот за да работам во проектот.

Чекор 29: Креирање и додавање на 223073.txt
Команди:
echo "Ивана Стратрова 223073" > 223073.txt
git add 223073.txt
git commit -m "Add file"
Објаснување:
Креирана е датотека со моето име и индекс, додадена во staging area и направен е commit со соодветна порака.

Чекор 30: Синхронизација со оддалечениот репозиториум
Команди:
git push origin master
Објаснување:
Со оваа команда локалните промени се испраќаат на GitHub (на мојот fork).

Чекор 31: Креирање Pull Request


